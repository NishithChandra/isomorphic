#!/usr/bin/env node

var args = require('minimist')(process.argv.slice(2));
var shell = require('shelljs');
var cwd = shell.pwd();
var ncp = require('ncp').ncp;
var path = require('path');
var fs = require('fs');
var spawn = require('child_process').spawn;
var chalk = require('chalk');
var Insight = require('insight');

var pkg = require('../package.json');
var version = pkg.version;

var validCommands = {
  NEW: 'new',
  SERVER: 'server',
  GULP: 'gulp'
};

var insight = new Insight({
  // Google Analytics tracking code
  trackingCode: pkg.tracking,
  packageName: pkg.name,
  packageVersion: pkg.version
});

if (insight.optOut === undefined) {
  return insight.askPermission(null, function (err, optOut) {
    init(optOut);
  });
} else {
  init(insight.optOut)
}

function init (optOut) {
  if (!optOut) {
    insight.track('IsomorphicCLI', 'init');
  }

  switch (args._[0]) {
  case validCommands.NEW:
    createApplicationAt(args._[1]);
    break;
  case validCommands.SERVER:
    spawn('gulp', ['server'], { stdio:'inherit' });
    break;
  case validCommands.GULP:
    var additional = args._[1] && args._[1] !== 'server' ? [args._[1]] : [];
    spawn('gulp', additional, { stdio:'inherit' });
    break;
  default:
    console.log(chalk.red('Please enter a valid argument.'));
  }
}

/**
 * Create new isomorphic application
 *
 * @param {String} location
 */
function createApplicationAt (target) {
  if (target) {
    target = path.join(cwd, target);
    emptyDirectory(target, function (empty) {
      if (empty) {
        installApplicationAt(target);
      } else {
        console.log(target + ' already exists.')
      }
    });
  } else {
    console.log('Must name application.')
  }
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */
function emptyDirectory (path, fn) {
  fs.readdir(path, function (err, files) {
    if (err && err.code != 'ENOENT') {
      throw err;
    }
    fn(!files || !files.length);
  });
}

/**
 * Copies files from blueprint to new application path.
 *
 * @param {String} destination
 */
function installApplicationAt (destination) {
  var blueprint = path.resolve(path.join(__dirname, '..', 'blueprint'));
  ncp(blueprint, destination, function (err) {
    if (err) {
      return console.error(err);
    } else {
      console.log(chalk.cyan('Application installed at', destination));
      console.log(chalk.yellow('Changing directory to', destination, 'and Running NPM Install'));
      shell.cd(destination);

      var npminstall = spawn('npm', ['install']);
      npminstall.stdout.on('data', function (data) {
        console.log('stdout: ' + data);
      });

      npminstall.stderr.on('data', function (data) {
        console.log(chalk.red(data));
      });

      npminstall.on('close', function (code) {
        console.log(chalk.green('Node modules installed, running isomorphic server'));
        spawn('gulp', ['server'], { stdio:'inherit' });
      });
    }
  });
}
