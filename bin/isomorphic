#!/usr/bin/env node

var args = require('minimist')(process.argv.slice(2));
var cwd = require('shelljs').pwd();
var ncp = require('ncp').ncp;
var path = require('path');
var fs = require('fs');

// var sys = require('sys');
// var spawn = require('child_process').spawn;
// var exec = require('child_process').exec;
// var prompt = require('prompt');

var pkg = require('../package.json');
var version = pkg.version;

var validCommands = {
  NEW: 'new'
};

switch (args._[0]) {
case validCommands.NEW:
  createApplicationAt(args._[1]);
  break;
default:
  console.log('Please enter a valid argument.')
}

/**
 * Create new isomorphic application
 *
 * @param {String} location
 */
function createApplicationAt (target) {
  if (target) {
    target = path.join(cwd, target);
    emptyDirectory(target, function (empty) {
      if (empty) {
        installApplicationAt(target);
      } else {
        console.log(target + ' already exists.')
      }
    });
  } else {
    console.log('Must name application.')
  }
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */
function emptyDirectory (path, fn) {
  fs.readdir(path, function (err, files) {
    if (err && 'ENOENT' != err.code) {
      throw err;
    }
    fn(!files || !files.length);
  });
}

/**
 * Copies files from blueprint to new application path.
 *
 * @param {String} destination
 */
function installApplicationAt (destination) {
  var blueprint = path.resolve(path.join(__dirname, '..', 'blueprint'));
  ncp(blueprint, destination, function (err) {
   if (err) {
     return console.error(err);
   } else {
     console.log('worked');
   }
  });
}
